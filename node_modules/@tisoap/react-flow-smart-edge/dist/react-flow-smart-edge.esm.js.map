{"version":3,"file":"react-flow-smart-edge.esm.js","sources":["../src/functions/guaranteeWalkablePath.ts","../src/functions/pointConversion.ts","../src/functions/utils.ts","../src/functions/createGrid.ts","../src/functions/drawSvgPath.ts","../src/functions/generatePath.ts","../src/functions/getBoundingBoxes.ts","../src/getSmartEdge/index.ts","../src/SmartEdge/index.tsx","../src/SmartBezierEdge/index.tsx","../src/SmartStepEdge/index.tsx","../src/SmartStraightEdge/index.tsx"],"sourcesContent":["import type { Grid } from 'pathfinding'\nimport type { Position, XYPosition } from 'react-flow-renderer'\n\ntype Direction = 'top' | 'bottom' | 'left' | 'right'\n\nexport const getNextPointFromPosition = (\n\tpoint: XYPosition,\n\tposition: Direction\n): XYPosition => {\n\tswitch (position) {\n\t\tcase 'top':\n\t\t\treturn { x: point.x, y: point.y - 1 }\n\t\tcase 'bottom':\n\t\t\treturn { x: point.x, y: point.y + 1 }\n\t\tcase 'left':\n\t\t\treturn { x: point.x - 1, y: point.y }\n\t\tcase 'right':\n\t\t\treturn { x: point.x + 1, y: point.y }\n\t}\n}\n\n/**\n * Guarantee that the path is walkable, even if the point is inside a non\n * walkable area, by adding a walkable path in the direction of the point's\n * Position.\n */\nexport const guaranteeWalkablePath = (\n\tgrid: Grid,\n\tpoint: XYPosition,\n\tposition: Position\n) => {\n\tlet node = grid.getNodeAt(point.x, point.y)\n\twhile (!node.walkable) {\n\t\tgrid.setWalkableAt(node.x, node.y, true)\n\t\tconst next = getNextPointFromPosition(node, position)\n\t\tnode = grid.getNodeAt(next.x, next.y)\n\t}\n}\n","import type { XYPosition } from 'react-flow-renderer'\n\n/**\n * Each bounding box is a collection of X/Y points in a graph, and we\n * need to convert them to \"occupied\" cells in a 2D grid representation.\n *\n * The top most position of the grid (grid[0][0]) needs to be equivalent\n * to the top most point in the graph (the graph.topLeft point).\n *\n * Since the top most point can have X/Y values different than zero,\n * and each cell in a grid represents a 10x10 pixel area in the grid (or a\n * gridRatio area), there's need to be a conversion between a point in a graph\n * to a point in the grid.\n *\n * We do this conversion by dividing a graph point X/Y values by the grid ratio,\n * and \"shifting\" their values up or down, depending on the values of the top\n * most point in the graph. The top most point in the graph will have the\n * smallest values for X and Y.\n *\n * We avoid setting nodes in the border of the grid (x=0 or y=0), so there's\n * always a \"walkable\" area around the grid.\n */\nexport const graphToGridPoint = (\n\tgraphPoint: XYPosition,\n\tsmallestX: number,\n\tsmallestY: number,\n\tgridRatio: number\n): XYPosition => {\n\tlet x = graphPoint.x / gridRatio\n\tlet y = graphPoint.y / gridRatio\n\n\tlet referenceX = smallestX / gridRatio\n\tlet referenceY = smallestY / gridRatio\n\n\tif (referenceX < 1) {\n\t\twhile (referenceX !== 1) {\n\t\t\treferenceX++\n\t\t\tx++\n\t\t}\n\t} else if (referenceX > 1) {\n\t\twhile (referenceX !== 1) {\n\t\t\treferenceX--\n\t\t\tx--\n\t\t}\n\t} else {\n\t\t// Nothing to do\n\t}\n\n\tif (referenceY < 1) {\n\t\twhile (referenceY !== 1) {\n\t\t\treferenceY++\n\t\t\ty++\n\t\t}\n\t} else if (referenceY > 1) {\n\t\twhile (referenceY !== 1) {\n\t\t\treferenceY--\n\t\t\ty--\n\t\t}\n\t} else {\n\t\t// Nothing to do\n\t}\n\n\treturn { x, y }\n}\n\n/**\n * Converts a grid point back to a graph point, using the reverse logic of\n * graphToGridPoint.\n */\nexport const gridToGraphPoint = (\n\tgridPoint: XYPosition,\n\tsmallestX: number,\n\tsmallestY: number,\n\tgridRatio: number\n): XYPosition => {\n\tlet x = gridPoint.x * gridRatio\n\tlet y = gridPoint.y * gridRatio\n\n\tlet referenceX = smallestX\n\tlet referenceY = smallestY\n\n\tif (referenceX < gridRatio) {\n\t\twhile (referenceX !== gridRatio) {\n\t\t\treferenceX = referenceX + gridRatio\n\t\t\tx = x - gridRatio\n\t\t}\n\t} else if (referenceX > gridRatio) {\n\t\twhile (referenceX !== gridRatio) {\n\t\t\treferenceX = referenceX - gridRatio\n\t\t\tx = x + gridRatio\n\t\t}\n\t} else {\n\t\t// Nothing to do\n\t}\n\n\tif (referenceY < gridRatio) {\n\t\twhile (referenceY !== gridRatio) {\n\t\t\treferenceY = referenceY + gridRatio\n\t\t\ty = y - gridRatio\n\t\t}\n\t} else if (referenceY > gridRatio) {\n\t\twhile (referenceY !== gridRatio) {\n\t\t\treferenceY = referenceY - gridRatio\n\t\t\ty = y + gridRatio\n\t\t}\n\t} else {\n\t\t// Nothing to do\n\t}\n\n\treturn { x, y }\n}\n","export const round = (x: number, multiple = 10) =>\n\tMath.round(x / multiple) * multiple\n\nexport const roundDown = (x: number, multiple = 10) =>\n\tMath.floor(x / multiple) * multiple\n\nexport const roundUp = (x: number, multiple = 10) =>\n\tMath.ceil(x / multiple) * multiple\n\nexport const toInteger = (value: number, min = 0) => {\n\tlet result = Math.max(Math.round(value), min)\n\tresult = Number.isInteger(result) ? result : min\n\tresult = result >= min ? result : min\n\treturn result\n}\n","import { Grid } from 'pathfinding'\nimport {\n\tguaranteeWalkablePath,\n\tgetNextPointFromPosition\n} from './guaranteeWalkablePath'\nimport { graphToGridPoint } from './pointConversion'\nimport { round, roundUp } from './utils'\nimport type { NodeBoundingBox, GraphBoundingBox } from './getBoundingBoxes'\nimport type { Position } from 'react-flow-renderer'\n\nexport type PointInfo = {\n\tx: number\n\ty: number\n\tposition: Position\n}\n\nexport const createGrid = (\n\tgraph: GraphBoundingBox,\n\tnodes: NodeBoundingBox[],\n\tsource: PointInfo,\n\ttarget: PointInfo,\n\tgridRatio = 2\n) => {\n\tconst { xMin, yMin, width, height } = graph\n\n\t// Create a grid representation of the graph box, where each cell is\n\t// equivalent to 10x10 pixels (or the grid ratio) on the graph. We'll use\n\t// this simplified grid to do pathfinding.\n\tconst mapColumns = roundUp(width, gridRatio) / gridRatio + 1\n\tconst mapRows = roundUp(height, gridRatio) / gridRatio + 1\n\tconst grid = new Grid(mapColumns, mapRows)\n\n\t// Update the grid representation with the space the nodes take up\n\tnodes.forEach((node) => {\n\t\tconst nodeStart = graphToGridPoint(node.topLeft, xMin, yMin, gridRatio)\n\t\tconst nodeEnd = graphToGridPoint(node.bottomRight, xMin, yMin, gridRatio)\n\n\t\tfor (let x = nodeStart.x; x < nodeEnd.x; x++) {\n\t\t\tfor (let y = nodeStart.y; y < nodeEnd.y; y++) {\n\t\t\t\tgrid.setWalkableAt(x, y, false)\n\t\t\t}\n\t\t}\n\t})\n\n\t// Convert the starting and ending graph points to grid points\n\tconst startGrid = graphToGridPoint(\n\t\t{\n\t\t\tx: round(source.x, gridRatio),\n\t\t\ty: round(source.y, gridRatio)\n\t\t},\n\t\txMin,\n\t\tyMin,\n\t\tgridRatio\n\t)\n\n\tconst endGrid = graphToGridPoint(\n\t\t{\n\t\t\tx: round(target.x, gridRatio),\n\t\t\ty: round(target.y, gridRatio)\n\t\t},\n\t\txMin,\n\t\tyMin,\n\t\tgridRatio\n\t)\n\n\t// Guarantee a walkable path between the start and end points, even if the\n\t// source or target where covered by another node or by padding\n\tconst startingNode = grid.getNodeAt(startGrid.x, startGrid.y)\n\tguaranteeWalkablePath(grid, startingNode, source.position)\n\tconst endingNode = grid.getNodeAt(endGrid.x, endGrid.y)\n\tguaranteeWalkablePath(grid, endingNode, target.position)\n\n\t// Use the next closest points as the start and end points, so\n\t// pathfinding does not start too close to the nodes\n\tconst start = getNextPointFromPosition(startingNode, source.position)\n\tconst end = getNextPointFromPosition(endingNode, target.position)\n\n\treturn { grid, start, end }\n}\n","import type { XYPosition } from 'react-flow-renderer'\n\n/**\n * Takes source and target {x, y} points, together with an array of number\n * tuples [x, y] representing the points along the path, and returns a string\n * to be used as the SVG path.\n */\nexport type SVGDrawFunction = (\n\tsource: XYPosition,\n\ttarget: XYPosition,\n\tpath: number[][]\n) => string\n\n/**\n * Draws a SVG path from a list of points, using straight lines.\n */\nexport const svgDrawStraightLinePath: SVGDrawFunction = (\n\tsource,\n\ttarget,\n\tpath\n) => {\n\tlet svgPathString = `M ${source.x}, ${source.y} `\n\n\tpath.forEach((point) => {\n\t\tconst [x, y] = point\n\t\tsvgPathString += `L ${x}, ${y} `\n\t})\n\n\tsvgPathString += `L ${target.x}, ${target.y} `\n\n\treturn svgPathString\n}\n\n/**\n * Draws a SVG path from a list of points, using rounded lines.\n */\nexport const svgDrawSmoothLinePath: SVGDrawFunction = (\n\tsource,\n\ttarget,\n\tpath\n) => {\n\tconst points = [[source.x, source.y], ...path, [target.x, target.y]]\n\treturn quadraticBezierCurve(points)\n}\n\nconst quadraticBezierCurve = (points: number[][]) => {\n\tconst X = 0\n\tconst Y = 1\n\tlet point = points[0]\n\n\tconst first = points[0]\n\tlet svgPath = `M${first[X]},${first[Y]}M`\n\n\tfor (let i = 0; i < points.length; i++) {\n\t\tconst next = points[i]\n\t\tconst midPoint = getMidPoint(point[X], point[Y], next[X], next[Y])\n\n\t\tsvgPath += ` ${midPoint[X]},${midPoint[Y]}`\n\t\tsvgPath += `Q${next[X]},${next[Y]}`\n\t\tpoint = next\n\t}\n\n\tconst last = points[points.length - 1]\n\tsvgPath += ` ${last[0]},${last[1]}`\n\n\treturn svgPath\n}\n\nconst getMidPoint = (Ax: number, Ay: number, Bx: number, By: number) => {\n\tconst Zx = (Ax - Bx) / 2 + Bx\n\tconst Zy = (Ay - By) / 2 + By\n\treturn [Zx, Zy]\n}\n","// FIXME: The \"pathfinding\" module doe not have proper typings.\n/* eslint-disable\n\t@typescript-eslint/no-unsafe-call,\n\t@typescript-eslint/no-unsafe-member-access,\n\t@typescript-eslint/no-unsafe-assignment,\n\t@typescript-eslint/ban-ts-comment,\n*/\nimport {\n\tAStarFinder,\n\tJumpPointFinder,\n\tUtil,\n\tDiagonalMovement\n} from 'pathfinding'\nimport type { Grid } from 'pathfinding'\nimport type { XYPosition } from 'react-flow-renderer'\n\n/**\n * Takes source and target {x, y} points, together with an grid representation\n * of the graph, and returns two arrays of number tuples [x, y]. The first\n * array represents the full path from source to target, and the second array\n * represents a condensed path from source to target.\n */\nexport type PathFindingFunction = (\n\tgrid: Grid,\n\tstart: XYPosition,\n\tend: XYPosition\n) => {\n\tfullPath: number[][]\n\tsmoothedPath: number[][]\n} | null\n\nexport const pathfindingAStarDiagonal: PathFindingFunction = (\n\tgrid,\n\tstart,\n\tend\n) => {\n\ttry {\n\t\tconst finder = new AStarFinder({\n\t\t\tdiagonalMovement: DiagonalMovement.Always\n\t\t})\n\t\tconst fullPath = finder.findPath(start.x, start.y, end.x, end.y, grid)\n\t\tconst smoothedPath = Util.smoothenPath(grid, fullPath)\n\t\tif (fullPath.length === 0 || smoothedPath.length === 0) return null\n\t\treturn { fullPath, smoothedPath }\n\t} catch {\n\t\treturn null\n\t}\n}\n\nexport const pathfindingAStarNoDiagonal: PathFindingFunction = (\n\tgrid,\n\tstart,\n\tend\n) => {\n\ttry {\n\t\tconst finder = new AStarFinder({\n\t\t\tdiagonalMovement: DiagonalMovement.Never\n\t\t})\n\t\tconst fullPath = finder.findPath(start.x, start.y, end.x, end.y, grid)\n\t\tconst smoothedPath = Util.smoothenPath(grid, fullPath)\n\t\tif (fullPath.length === 0 || smoothedPath.length === 0) return null\n\t\treturn { fullPath, smoothedPath }\n\t} catch {\n\t\treturn null\n\t}\n}\n\nexport const pathfindingJumpPointNoDiagonal: PathFindingFunction = (\n\tgrid,\n\tstart,\n\tend\n) => {\n\ttry {\n\t\t// FIXME: The \"pathfinding\" module doe not have proper typings.\n\t\t// @ts-ignore\n\t\tconst finder = new JumpPointFinder({\n\t\t\tdiagonalMovement: DiagonalMovement.Never\n\t\t})\n\t\tconst fullPath = finder.findPath(start.x, start.y, end.x, end.y, grid)\n\t\tconst smoothedPath = fullPath\n\t\tif (fullPath.length === 0 || smoothedPath.length === 0) return null\n\t\treturn { fullPath, smoothedPath }\n\t} catch {\n\t\treturn null\n\t}\n}\n","import { roundUp, roundDown } from './utils'\nimport type { Node, XYPosition } from 'react-flow-renderer'\n\nexport type NodeBoundingBox = {\n\tid: string\n\twidth: number\n\theight: number\n\ttopLeft: XYPosition\n\tbottomLeft: XYPosition\n\ttopRight: XYPosition\n\tbottomRight: XYPosition\n}\n\nexport type GraphBoundingBox = {\n\twidth: number\n\theight: number\n\ttopLeft: XYPosition\n\tbottomLeft: XYPosition\n\ttopRight: XYPosition\n\tbottomRight: XYPosition\n\txMax: number\n\tyMax: number\n\txMin: number\n\tyMin: number\n}\n\n/**\n * Get the bounding box of all nodes and the graph itself, as X/Y coordinates\n * of all corner points.\n *\n * @param nodes The node list\n * @param nodePadding Optional padding to add to the node's and graph bounding boxes\n * @param roundTo Everything will be rounded to this nearest integer\n * @returns Graph and nodes bounding boxes.\n */\nexport const getBoundingBoxes = <NodeDataType = unknown>(\n\tnodes: Node<NodeDataType>[],\n\tnodePadding = 2,\n\troundTo = 2\n) => {\n\tlet xMax = Number.MIN_SAFE_INTEGER\n\tlet yMax = Number.MIN_SAFE_INTEGER\n\tlet xMin = Number.MAX_SAFE_INTEGER\n\tlet yMin = Number.MAX_SAFE_INTEGER\n\n\tconst nodeBoxes: NodeBoundingBox[] = nodes.map((node) => {\n\t\tconst width = Math.max(node.width || 0, 1)\n\t\tconst height = Math.max(node.height || 0, 1)\n\n\t\tconst position: XYPosition = {\n\t\t\tx: node.positionAbsolute?.x || 0,\n\t\t\ty: node.positionAbsolute?.y || 0\n\t\t}\n\n\t\tconst topLeft: XYPosition = {\n\t\t\tx: position.x - nodePadding,\n\t\t\ty: position.y - nodePadding\n\t\t}\n\t\tconst bottomLeft: XYPosition = {\n\t\t\tx: position.x - nodePadding,\n\t\t\ty: position.y + height + nodePadding\n\t\t}\n\t\tconst topRight: XYPosition = {\n\t\t\tx: position.x + width + nodePadding,\n\t\t\ty: position.y - nodePadding\n\t\t}\n\t\tconst bottomRight: XYPosition = {\n\t\t\tx: position.x + width + nodePadding,\n\t\t\ty: position.y + height + nodePadding\n\t\t}\n\n\t\tif (roundTo > 0) {\n\t\t\ttopLeft.x = roundDown(topLeft.x, roundTo)\n\t\t\ttopLeft.y = roundDown(topLeft.y, roundTo)\n\t\t\tbottomLeft.x = roundDown(bottomLeft.x, roundTo)\n\t\t\tbottomLeft.y = roundUp(bottomLeft.y, roundTo)\n\t\t\ttopRight.x = roundUp(topRight.x, roundTo)\n\t\t\ttopRight.y = roundDown(topRight.y, roundTo)\n\t\t\tbottomRight.x = roundUp(bottomRight.x, roundTo)\n\t\t\tbottomRight.y = roundUp(bottomRight.y, roundTo)\n\t\t}\n\n\t\tif (topLeft.y < yMin) yMin = topLeft.y\n\t\tif (topLeft.x < xMin) xMin = topLeft.x\n\t\tif (bottomRight.y > yMax) yMax = bottomRight.y\n\t\tif (bottomRight.x > xMax) xMax = bottomRight.x\n\n\t\treturn {\n\t\t\tid: node.id,\n\t\t\twidth,\n\t\t\theight,\n\t\t\ttopLeft,\n\t\t\tbottomLeft,\n\t\t\ttopRight,\n\t\t\tbottomRight\n\t\t}\n\t})\n\n\tconst graphPadding = nodePadding * 2\n\n\txMax = roundUp(xMax + graphPadding, roundTo)\n\tyMax = roundUp(yMax + graphPadding, roundTo)\n\txMin = roundDown(xMin - graphPadding, roundTo)\n\tyMin = roundDown(yMin - graphPadding, roundTo)\n\n\tconst topLeft: XYPosition = {\n\t\tx: xMin,\n\t\ty: yMin\n\t}\n\n\tconst bottomLeft: XYPosition = {\n\t\tx: xMin,\n\t\ty: yMax\n\t}\n\n\tconst topRight: XYPosition = {\n\t\tx: xMax,\n\t\ty: yMin\n\t}\n\n\tconst bottomRight: XYPosition = {\n\t\tx: xMax,\n\t\ty: yMax\n\t}\n\n\tconst width = Math.abs(topLeft.x - topRight.x)\n\tconst height = Math.abs(topLeft.y - bottomLeft.y)\n\n\tconst graphBox: GraphBoundingBox = {\n\t\ttopLeft,\n\t\tbottomLeft,\n\t\ttopRight,\n\t\tbottomRight,\n\t\twidth,\n\t\theight,\n\t\txMax,\n\t\tyMax,\n\t\txMin,\n\t\tyMin\n\t}\n\n\treturn { nodeBoxes, graphBox }\n}\n","import {\n\tcreateGrid,\n\tgetBoundingBoxes,\n\tgridToGraphPoint,\n\tpathfindingAStarDiagonal,\n\tsvgDrawSmoothLinePath,\n\ttoInteger\n} from '../functions'\nimport type {\n\tPointInfo,\n\tPathFindingFunction,\n\tSVGDrawFunction\n} from '../functions'\nimport type { Node, EdgeProps } from 'react-flow-renderer'\n\nexport type EdgeParams = Pick<\n\tEdgeProps,\n\t| 'sourceX'\n\t| 'sourceY'\n\t| 'targetX'\n\t| 'targetY'\n\t| 'sourcePosition'\n\t| 'targetPosition'\n>\n\nexport type GetSmartEdgeOptions = {\n\tgridRatio?: number\n\tnodePadding?: number\n\tdrawEdge?: SVGDrawFunction\n\tgeneratePath?: PathFindingFunction\n}\n\nexport type GetSmartEdgeParams<NodeDataType = unknown> = EdgeParams & {\n\toptions?: GetSmartEdgeOptions\n\tnodes: Node<NodeDataType>[]\n}\n\nexport type GetSmartEdgeReturn = {\n\tsvgPathString: string\n\tedgeCenterX: number\n\tedgeCenterY: number\n}\n\nexport const getSmartEdge = <NodeDataType = unknown>({\n\toptions = {},\n\tnodes = [],\n\tsourceX,\n\tsourceY,\n\ttargetX,\n\ttargetY,\n\tsourcePosition,\n\ttargetPosition\n}: GetSmartEdgeParams<NodeDataType>): GetSmartEdgeReturn | null => {\n\ttry {\n\t\tconst {\n\t\t\tdrawEdge = svgDrawSmoothLinePath,\n\t\t\tgeneratePath = pathfindingAStarDiagonal\n\t\t} = options\n\n\t\tlet { gridRatio = 10, nodePadding = 10 } = options\n\t\tgridRatio = toInteger(gridRatio)\n\t\tnodePadding = toInteger(nodePadding)\n\n\t\t// We use the node's information to generate bounding boxes for them\n\t\t// and the graph\n\t\tconst { graphBox, nodeBoxes } = getBoundingBoxes<NodeDataType>(\n\t\t\tnodes,\n\t\t\tnodePadding,\n\t\t\tgridRatio\n\t\t)\n\n\t\tconst source: PointInfo = {\n\t\t\tx: sourceX,\n\t\t\ty: sourceY,\n\t\t\tposition: sourcePosition\n\t\t}\n\n\t\tconst target: PointInfo = {\n\t\t\tx: targetX,\n\t\t\ty: targetY,\n\t\t\tposition: targetPosition\n\t\t}\n\n\t\t// With this information, we can create a 2D grid representation of\n\t\t// our graph, that tells us where in the graph there is a \"free\" space or not\n\t\tconst { grid, start, end } = createGrid(\n\t\t\tgraphBox,\n\t\t\tnodeBoxes,\n\t\t\tsource,\n\t\t\ttarget,\n\t\t\tgridRatio\n\t\t)\n\n\t\t// We then can use the grid representation to do pathfinding\n\t\tconst generatePathResult = generatePath(grid, start, end)\n\n\t\tif (generatePathResult === null) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst { fullPath, smoothedPath } = generatePathResult\n\n\t\t// Here we convert the grid path to a sequence of graph coordinates.\n\t\tconst graphPath = smoothedPath.map((gridPoint) => {\n\t\t\tconst [x, y] = gridPoint\n\t\t\tconst graphPoint = gridToGraphPoint(\n\t\t\t\t{ x, y },\n\t\t\t\tgraphBox.xMin,\n\t\t\t\tgraphBox.yMin,\n\t\t\t\tgridRatio\n\t\t\t)\n\t\t\treturn [graphPoint.x, graphPoint.y]\n\t\t})\n\n\t\t// Finally, we can use the graph path to draw the edge\n\t\tconst svgPathString = drawEdge(source, target, graphPath)\n\n\t\t// Compute the edge's middle point using the full path, so users can use\n\t\t// it to position their custom labels\n\t\tconst index = Math.floor(fullPath.length / 2)\n\t\tconst middlePoint = fullPath[index]\n\t\tconst [middleX, middleY] = middlePoint\n\t\tconst { x: edgeCenterX, y: edgeCenterY } = gridToGraphPoint(\n\t\t\t{ x: middleX, y: middleY },\n\t\t\tgraphBox.xMin,\n\t\t\tgraphBox.yMin,\n\t\t\tgridRatio\n\t\t)\n\n\t\treturn { svgPathString, edgeCenterX, edgeCenterY }\n\t} catch {\n\t\treturn null\n\t}\n}\n\nexport type GetSmartEdgeFunction = typeof getSmartEdge\n","import React from 'react'\nimport { EdgeText, BezierEdge } from 'react-flow-renderer'\nimport { getSmartEdge } from '../getSmartEdge'\nimport type { GetSmartEdgeOptions } from '../getSmartEdge'\nimport type { EdgeProps, Node } from 'react-flow-renderer'\n\nexport type EdgeElement = typeof BezierEdge\n\nexport type SmartEdgeOptions = GetSmartEdgeOptions & {\n\tfallback?: EdgeElement\n}\n\nexport interface SmartEdgeProps<EdgeDataType = unknown, NodeDataType = unknown>\n\textends EdgeProps<EdgeDataType> {\n\tnodes: Node<NodeDataType>[]\n\toptions: SmartEdgeOptions\n}\n\nexport function SmartEdge<EdgeDataType = unknown, NodeDataType = unknown>({\n\tnodes,\n\toptions,\n\t...edgeProps\n}: SmartEdgeProps<EdgeDataType, NodeDataType>) {\n\tconst {\n\t\tsourceX,\n\t\tsourceY,\n\t\tsourcePosition,\n\t\ttargetX,\n\t\ttargetY,\n\t\ttargetPosition,\n\t\tstyle,\n\t\tlabel,\n\t\tlabelStyle,\n\t\tlabelShowBg,\n\t\tlabelBgStyle,\n\t\tlabelBgPadding,\n\t\tlabelBgBorderRadius,\n\t\tmarkerEnd,\n\t\tmarkerStart\n\t} = edgeProps\n\n\tconst smartResponse = getSmartEdge({\n\t\tsourcePosition,\n\t\ttargetPosition,\n\t\tsourceX,\n\t\tsourceY,\n\t\ttargetX,\n\t\ttargetY,\n\t\toptions,\n\t\tnodes\n\t})\n\n\tconst FallbackEdge = options.fallback || BezierEdge\n\n\tif (smartResponse === null) {\n\t\treturn <FallbackEdge {...edgeProps} />\n\t}\n\n\tconst { edgeCenterX, edgeCenterY, svgPathString } = smartResponse\n\n\tlet edgeLabel: JSX.Element | null = null\n\tconst hasStringLabel = !!label && typeof label === 'string'\n\n\tif (hasStringLabel) {\n\t\tedgeLabel = (\n\t\t\t<EdgeText\n\t\t\t\tx={edgeCenterX}\n\t\t\t\ty={edgeCenterY}\n\t\t\t\tlabel={label}\n\t\t\t\tlabelStyle={labelStyle}\n\t\t\t\tlabelShowBg={labelShowBg}\n\t\t\t\tlabelBgStyle={labelBgStyle}\n\t\t\t\tlabelBgPadding={labelBgPadding}\n\t\t\t\tlabelBgBorderRadius={labelBgBorderRadius}\n\t\t\t/>\n\t\t)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<path\n\t\t\t\tstyle={style}\n\t\t\t\tclassName='react-flow__edge-path'\n\t\t\t\td={svgPathString}\n\t\t\t\tmarkerEnd={markerEnd}\n\t\t\t\tmarkerStart={markerStart}\n\t\t\t/>\n\t\t\t{edgeLabel}\n\t\t</>\n\t)\n}\n\nexport type SmartEdgeFunction = typeof SmartEdge\n","import React from 'react'\nimport { useNodes, BezierEdge } from 'react-flow-renderer'\nimport { SmartEdge } from '../SmartEdge'\nimport { svgDrawSmoothLinePath, pathfindingAStarDiagonal } from '../functions'\nimport type { SmartEdgeOptions } from '../SmartEdge'\nimport type { EdgeProps } from 'react-flow-renderer'\n\nconst BezierConfiguration: SmartEdgeOptions = {\n\tdrawEdge: svgDrawSmoothLinePath,\n\tgeneratePath: pathfindingAStarDiagonal,\n\tfallback: BezierEdge\n}\n\nexport function SmartBezierEdge<EdgeDataType = unknown, NodeDataType = unknown>(\n\tprops: EdgeProps<EdgeDataType>\n) {\n\tconst nodes = useNodes<NodeDataType>()\n\n\treturn (\n\t\t<SmartEdge<EdgeDataType, NodeDataType>\n\t\t\t{...props}\n\t\t\toptions={BezierConfiguration}\n\t\t\tnodes={nodes}\n\t\t/>\n\t)\n}\n","import React from 'react'\nimport { useNodes, StepEdge } from 'react-flow-renderer'\nimport { SmartEdge } from '../SmartEdge'\nimport {\n\tsvgDrawStraightLinePath,\n\tpathfindingJumpPointNoDiagonal\n} from '../functions'\nimport type { SmartEdgeOptions } from '../SmartEdge'\nimport type { EdgeProps } from 'react-flow-renderer'\n\nconst StepConfiguration: SmartEdgeOptions = {\n\tdrawEdge: svgDrawStraightLinePath,\n\tgeneratePath: pathfindingJumpPointNoDiagonal,\n\tfallback: StepEdge\n}\n\nexport function SmartStepEdge<EdgeDataType = unknown, NodeDataType = unknown>(\n\tprops: EdgeProps<EdgeDataType>\n) {\n\tconst nodes = useNodes<NodeDataType>()\n\n\treturn (\n\t\t<SmartEdge<EdgeDataType, NodeDataType>\n\t\t\t{...props}\n\t\t\toptions={StepConfiguration}\n\t\t\tnodes={nodes}\n\t\t/>\n\t)\n}\n","import React from 'react'\nimport { useNodes, StraightEdge } from 'react-flow-renderer'\nimport { SmartEdge } from '../SmartEdge'\nimport {\n\tsvgDrawStraightLinePath,\n\tpathfindingAStarNoDiagonal\n} from '../functions'\nimport type { SmartEdgeOptions } from '../SmartEdge'\nimport type { EdgeProps } from 'react-flow-renderer'\n\nconst StraightConfiguration: SmartEdgeOptions = {\n\tdrawEdge: svgDrawStraightLinePath,\n\tgeneratePath: pathfindingAStarNoDiagonal,\n\tfallback: StraightEdge\n}\n\nexport function SmartStraightEdge<\n\tEdgeDataType = unknown,\n\tNodeDataType = unknown\n>(props: EdgeProps<EdgeDataType>) {\n\tconst nodes = useNodes<NodeDataType>()\n\n\treturn (\n\t\t<SmartEdge<EdgeDataType, NodeDataType>\n\t\t\t{...props}\n\t\t\toptions={StraightConfiguration}\n\t\t\tnodes={nodes}\n\t\t/>\n\t)\n}\n"],"names":["getNextPointFromPosition","point","position","x","y","guaranteeWalkablePath","grid","node","getNodeAt","walkable","setWalkableAt","next","graphToGridPoint","graphPoint","smallestX","smallestY","gridRatio","referenceX","referenceY","gridToGraphPoint","gridPoint","round","multiple","Math","roundDown","floor","roundUp","ceil","toInteger","value","min","result","max","Number","isInteger","createGrid","graph","nodes","source","target","xMin","yMin","width","height","mapColumns","mapRows","Grid","forEach","nodeStart","topLeft","nodeEnd","bottomRight","startGrid","endGrid","startingNode","endingNode","start","end","svgDrawStraightLinePath","path","svgPathString","svgDrawSmoothLinePath","points","quadraticBezierCurve","X","Y","first","svgPath","i","length","midPoint","getMidPoint","last","Ax","Ay","Bx","By","Zx","Zy","pathfindingAStarDiagonal","finder","AStarFinder","diagonalMovement","DiagonalMovement","Always","fullPath","findPath","smoothedPath","Util","smoothenPath","pathfindingAStarNoDiagonal","Never","pathfindingJumpPointNoDiagonal","JumpPointFinder","getBoundingBoxes","nodePadding","roundTo","xMax","MIN_SAFE_INTEGER","yMax","MAX_SAFE_INTEGER","nodeBoxes","map","positionAbsolute","bottomLeft","topRight","id","graphPadding","abs","graphBox","getSmartEdge","options","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","drawEdge","generatePath","generatePathResult","graphPath","index","middlePoint","middleX","middleY","edgeCenterX","edgeCenterY","SmartEdge","edgeProps","style","label","labelStyle","labelShowBg","labelBgStyle","labelBgPadding","labelBgBorderRadius","markerEnd","markerStart","smartResponse","FallbackEdge","fallback","BezierEdge","React","createElement","edgeLabel","hasStringLabel","EdgeText","Fragment","className","d","BezierConfiguration","SmartBezierEdge","props","useNodes","StepConfiguration","StepEdge","SmartStepEdge","StraightConfiguration","StraightEdge","SmartStraightEdge"],"mappings":"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"}